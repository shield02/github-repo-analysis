Docker
So we will dockerize this application

# Read up on
1. docker
2. containerization
3. docker-compose
4. Read up on directory structure for a FastAPI project

# Setting up the project
Add license
Add .gitignore
Add requirements.txt
Add .dockerignore
Add .env - this file is used to manage or store secret used in the application
Add .env.example
Create a virtual environment for the start

Create a project folder
Add all the setup files, like .gitignore, README, License requirements.txt
Create a virtual environment and install all the necessary packages

# Now let us tackle the problem statement
You will ask yourself what features will this project have
    - user object
        needed if we will to store user info
        for authentication
        will need to store user information
        can be represented as a class
    - authentication (ability to sign up or sign in) username/email and password or biometrics
        checking the credentials 
    - authorization (privilege to perform certain operations) e.g, can you delete a user account
        actions a user is allowed to perform
        oauth - user can login to access their private repo
    - need an api
        if we will need an api, what will it be used for?
    - will i have to register on an external platform
        yes

    - will you need a database if yes
        - will you need a table (table schema) [sqlite]
        - how many
        N/B: tables are represent or called models in applications
    - will you need a frontend, or it will only be a backend that defines apis only
    - if it is only backend api only, how will I access the api to test that it is working as expected this is
        different from testing the application using Pytest or Unittest'. Here you will need to use an app called
        postman to access the apis
    - Which Python framework will be suitable for a project like this. E.g FastAPI, Django, Flask
        main.py
        core/ - contains core logic like app config and security settings
        db/ - manages db connections, models and CRUD operations
        api/routes/ - defines api endpoints grouped functionality
        schemas/ - defines pydantic models for data validation and serialization
        test/ - pytest
        .env - store sensitive information like API or secret keys, database url
        requirements.txt
    - Which test library will I use for the project, e.g. pytest, unittest, snail
    - How many API endpoints or routes will I need. Here think about if I am to have a frontend, the frontend
        will need a way to access the data I have stored in the database or data structure. So how many routes
        will I need to define.
        What will guide here will be
            How many model entities does the application have eg. user, students, classes, books

# Things to research on
What is a url.
Parts of a url
What are the libraries in Python that I can use to work with a URL.
What is the difference between a URL and an API

# URL
https://github.com/shield02/repositories

# API
https://twitter.com/api/v1/users

programmatically accessing a url

# Command line commands you can use to access a web url
curl -p
wget
httpie

# What data structure will I use to store the repositories that I will get from the URL

I want to create an application that takes a github url and finds all the repositories
using python. please recommend a framework and how I can approach the problem. Will I need
a database. Will I need a model, how many will I need.


STEPS ON HOW TO PROCEED ON THE PROJECT
1. Define criteria for complexity
    - Define complexity metrics. Could be based on code length, dependencies, language used
        or even more challenging patterns like custom algorithms.
    - Use GPT prompts to compare repos and rank complexity according to these metrics.
2. GitHub API Interactions
    - Use the GitHub API to fetch repositories from a user's profile.
    - Collect metadata like programming languages, repository size, commit history, number of contributors
3. Repository analysis pipeline
